# The set of handlers to be loaded upon startup. 
# Comma-separated list of class names. 
# (? LogManager docs say no comma here, but JDK example has comma.) 
handlers=java.util.logging.FileHandler

# Default global logging level. 
# Loggers and Handlers may override this level 
.level=ALL

# Handlers 
# -----------------------------------------

# --- FileHandler --- 
# Override of global logging level 
java.util.logging.FileHandler.level=ALL

# Naming style for the output file: 
# A pattern consists of a string that includes the following special components that will be replaced at runtime:
# "/" the local pathname separator
# "%t" the system temporary directory
# "%h" the value of the "user.home" system property
# "%g" the generation number to distinguish rotated logs
# "%u" a unique number to resolve conflicts
# "%%" translates to a single percent sign "%"
java.util.logging.FileHandler.pattern=log/AppLogger-%g.log

# Sets whether or not the FileHandler's should append to an existing file or 
# not (true or false), if an existing log file is found.
java.util.logging.FileHandler.append=true

# Limiting size of output file in bytes: 
java.util.logging.FileHandler.limit=50000

# Number of output files to cycle through, by appending an 
# integer to the base file name: 
java.util.logging.FileHandler.count=1

# Style of output (Simple or XML): 
# I need to write my own Formatter c1ass if I want other format.
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter